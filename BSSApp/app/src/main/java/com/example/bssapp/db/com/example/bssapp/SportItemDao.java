package com.example.bssapp;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.bssapp.db.models.SportItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "sport_items".
*/
public class SportItemDao extends AbstractDao<SportItem, Long> {

    public static final String TABLENAME = "sport_items";

    /**
     * Properties of entity SportItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SportId = new Property(0, Long.class, "sportId", true, "_id");
        public final static Property SportName = new Property(1, String.class, "sportName", false, "SPORT_NAME");
        public final static Property CreateDate = new Property(2, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property Deleted = new Property(3, boolean.class, "deleted", false, "DELETED");
    }


    public SportItemDao(DaoConfig config) {
        super(config);
    }
    
    public SportItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"sport_items\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: sportId
                "\"SPORT_NAME\" TEXT," + // 1: sportName
                "\"CREATE_DATE\" INTEGER," + // 2: createDate
                "\"DELETED\" INTEGER NOT NULL );"); // 3: deleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"sport_items\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SportItem entity) {
        stmt.clearBindings();
 
        Long sportId = entity.getSportId();
        if (sportId != null) {
            stmt.bindLong(1, sportId);
        }
 
        String sportName = entity.getSportName();
        if (sportName != null) {
            stmt.bindString(2, sportName);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(3, createDate.getTime());
        }
        stmt.bindLong(4, entity.getDeleted() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SportItem entity) {
        stmt.clearBindings();
 
        Long sportId = entity.getSportId();
        if (sportId != null) {
            stmt.bindLong(1, sportId);
        }
 
        String sportName = entity.getSportName();
        if (sportName != null) {
            stmt.bindString(2, sportName);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(3, createDate.getTime());
        }
        stmt.bindLong(4, entity.getDeleted() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SportItem readEntity(Cursor cursor, int offset) {
        SportItem entity = new SportItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sportId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sportName
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // createDate
            cursor.getShort(offset + 3) != 0 // deleted
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SportItem entity, int offset) {
        entity.setSportId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSportName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setDeleted(cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SportItem entity, long rowId) {
        entity.setSportId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SportItem entity) {
        if(entity != null) {
            return entity.getSportId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SportItem entity) {
        return entity.getSportId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
