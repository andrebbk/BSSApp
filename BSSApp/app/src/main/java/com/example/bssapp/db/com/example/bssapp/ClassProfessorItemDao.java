package com.example.bssapp;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.bssapp.db.models.ClassProfessorItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "classProfessor_items".
*/
public class ClassProfessorItemDao extends AbstractDao<ClassProfessorItem, Long> {

    public static final String TABLENAME = "classProfessor_items";

    /**
     * Properties of entity ClassProfessorItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ClassProfessorId = new Property(0, Long.class, "classProfessorId", true, "_id");
        public final static Property ClassId = new Property(1, Long.class, "classId", false, "CLASS_ID");
        public final static Property ProfessorId = new Property(2, Long.class, "professorId", false, "PROFESSOR_ID");
        public final static Property CreateDate = new Property(3, java.util.Date.class, "createDate", false, "CREATE_DATE");
    }


    public ClassProfessorItemDao(DaoConfig config) {
        super(config);
    }
    
    public ClassProfessorItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"classProfessor_items\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: classProfessorId
                "\"CLASS_ID\" INTEGER," + // 1: classId
                "\"PROFESSOR_ID\" INTEGER," + // 2: professorId
                "\"CREATE_DATE\" INTEGER);"); // 3: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"classProfessor_items\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ClassProfessorItem entity) {
        stmt.clearBindings();
 
        Long classProfessorId = entity.getClassProfessorId();
        if (classProfessorId != null) {
            stmt.bindLong(1, classProfessorId);
        }
 
        Long classId = entity.getClassId();
        if (classId != null) {
            stmt.bindLong(2, classId);
        }
 
        Long professorId = entity.getProfessorId();
        if (professorId != null) {
            stmt.bindLong(3, professorId);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(4, createDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ClassProfessorItem entity) {
        stmt.clearBindings();
 
        Long classProfessorId = entity.getClassProfessorId();
        if (classProfessorId != null) {
            stmt.bindLong(1, classProfessorId);
        }
 
        Long classId = entity.getClassId();
        if (classId != null) {
            stmt.bindLong(2, classId);
        }
 
        Long professorId = entity.getProfessorId();
        if (professorId != null) {
            stmt.bindLong(3, professorId);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(4, createDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ClassProfessorItem readEntity(Cursor cursor, int offset) {
        ClassProfessorItem entity = new ClassProfessorItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // classProfessorId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // classId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // professorId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ClassProfessorItem entity, int offset) {
        entity.setClassProfessorId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClassId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setProfessorId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCreateDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ClassProfessorItem entity, long rowId) {
        entity.setClassProfessorId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ClassProfessorItem entity) {
        if(entity != null) {
            return entity.getClassProfessorId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ClassProfessorItem entity) {
        return entity.getClassProfessorId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
