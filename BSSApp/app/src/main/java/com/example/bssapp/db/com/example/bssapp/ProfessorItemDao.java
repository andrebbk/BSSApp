package com.example.bssapp;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.bssapp.db.models.ProfessorItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "professor_items".
*/
public class ProfessorItemDao extends AbstractDao<ProfessorItem, Long> {

    public static final String TABLENAME = "professor_items";

    /**
     * Properties of entity ProfessorItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ProfessorId = new Property(0, Long.class, "professorId", true, "_id");
        public final static Property FirstName = new Property(1, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(2, String.class, "lastName", false, "LAST_NAME");
        public final static Property CreateDate = new Property(3, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property Deleted = new Property(4, boolean.class, "deleted", false, "DELETED");
    }


    public ProfessorItemDao(DaoConfig config) {
        super(config);
    }
    
    public ProfessorItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"professor_items\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: professorId
                "\"FIRST_NAME\" TEXT," + // 1: firstName
                "\"LAST_NAME\" TEXT," + // 2: lastName
                "\"CREATE_DATE\" INTEGER," + // 3: createDate
                "\"DELETED\" INTEGER NOT NULL );"); // 4: deleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"professor_items\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProfessorItem entity) {
        stmt.clearBindings();
 
        Long professorId = entity.getProfessorId();
        if (professorId != null) {
            stmt.bindLong(1, professorId);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(2, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(3, lastName);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(4, createDate.getTime());
        }
        stmt.bindLong(5, entity.getDeleted() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProfessorItem entity) {
        stmt.clearBindings();
 
        Long professorId = entity.getProfessorId();
        if (professorId != null) {
            stmt.bindLong(1, professorId);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(2, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(3, lastName);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(4, createDate.getTime());
        }
        stmt.bindLong(5, entity.getDeleted() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProfessorItem readEntity(Cursor cursor, int offset) {
        ProfessorItem entity = new ProfessorItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // professorId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // firstName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastName
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // createDate
            cursor.getShort(offset + 4) != 0 // deleted
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProfessorItem entity, int offset) {
        entity.setProfessorId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFirstName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setDeleted(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProfessorItem entity, long rowId) {
        entity.setProfessorId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProfessorItem entity) {
        if(entity != null) {
            return entity.getProfessorId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProfessorItem entity) {
        return entity.getProfessorId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
